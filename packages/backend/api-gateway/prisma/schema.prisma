// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Usuario principal
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  username  String   @unique
  password  String   // hasheado con bcrypt
  age       Int?
  avatar    String?  // URL del avatar
  role      UserRole @default(STUDENT)
  
  // Progreso del juego
  currentWorld    String @default("villa-verdad")
  currentLevel    Int    @default(1)
  totalScore      Int    @default(0)
  logicPoints     Int    @default(0)
  
  // Fechas
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  lastLogin DateTime?
  
  // Relaciones
  progress     UserProgress[]
  achievements Achievement[]
  teamMembers  TeamMember[]
  chatMessages ChatMessage[]
  
  // ðŸš€ Relaciones Multijugador Ã‰picas
  createdRooms        MultiplayerRoom[]      @relation("RoomCreator")
  roomParticipations  RoomParticipant[]
  playerSessions      PlayerSession[]
  roomMessages        RoomMessage[]          @relation("RoomMessages")
  playerStats         PlayerStats?
  tournamentParticipations TournamentParticipant[]
  tournamentPlayer1   TournamentMatch[]      @relation("TournamentPlayer1")
  tournamentPlayer2   TournamentMatch[]      @relation("TournamentPlayer2")
  tournamentWins      TournamentMatch[]      @relation("TournamentWinner")
  
  @@map("users")
}

// Roles de usuario
enum UserRole {
  STUDENT
  TEACHER
  ADMIN
}

// Progreso por mundo/nivel
model UserProgress {
  id       String @id @default(cuid())
  userId   String
  worldId  String
  levelId  String
  
  // Progreso
  completed     Boolean   @default(false)
  score         Int       @default(0)
  attempts      Int       @default(0)
  bestTime      Int?      // en segundos
  hintsUsed     Int       @default(0)
  completedAt   DateTime?
  
  // Relaciones
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId, worldId, levelId])
  @@map("user_progress")
}

// Logros desbloqueados
model Achievement {
  id          String   @id @default(cuid())
  userId      String
  type        String   // "first-steps", "truth-seeker", etc.
  title       String
  description String
  icon        String?
  points      Int      @default(10)
  unlockedAt  DateTime @default(now())
  
  // Relaciones
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("achievements")
}

// Equipos/Guilds
model Team {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  maxMembers  Int      @default(8)
  isPublic    Boolean  @default(true)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relaciones
  members TeamMember[]
  
  @@map("teams")
}

// Miembros de equipos
model TeamMember {
  id     String   @id @default(cuid())
  userId String
  teamId String
  role   TeamRole @default(MEMBER)
  
  joinedAt DateTime @default(now())
  
  // Relaciones
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  team Team @relation(fields: [teamId], references: [id], onDelete: Cascade)
  
  @@unique([userId, teamId])
  @@map("team_members")
}

enum TeamRole {
  MEMBER
  MODERATOR
  LEADER
}

// Mensajes de chat
model ChatMessage {
  id       String      @id @default(cuid())
  userId   String
  content  String
  type     MessageType @default(GENERAL)
  roomId   String?     // para salas especÃ­ficas
  
  createdAt DateTime @default(now())
  
  // Relaciones
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("chat_messages")
}

enum MessageType {
  GENERAL
  TEAM
  PRIVATE
  SYSTEM
  CHAT
  AI_MODERATOR
}

// Sesiones de usuario (para JWT invalidation)
model UserSession {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  
  @@map("user_sessions")
}

// ConfiguraciÃ³n de mundos/niveles (para admin)
model GameWorld {
  id          String @id @default(cuid())
  name        String @unique
  title       String
  description String
  order       Int
  isActive    Boolean @default(true)
  
  // Requisitos para desbloquear
  requiredWorld String?
  requiredLevel Int?
  requiredScore Int     @default(0)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relaciones
  levels GameLevel[]
  
  @@map("game_worlds")
}

// Niveles dentro de cada mundo
model GameLevel {
  id          String @id @default(cuid())
  worldId     String
  name        String
  title       String
  description String
  order       Int
  difficulty  Int    @default(1) // 1-5
  
  // Contenido del nivel
  content     Json   // Estructura flexible para diferentes tipos de problemas
  solution    Json   // Soluciones esperadas
  hints       Json   // Pistas disponibles
  
  // PuntuaciÃ³n
  maxScore    Int @default(100)
  timeLimit   Int? // en segundos, null = sin lÃ­mite
  
  isActive Boolean @default(true)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relaciones
  world GameWorld @relation(fields: [worldId], references: [id], onDelete: Cascade)
  multiplayerSessions MultiplayerSession[]
  
  @@unique([worldId, order])
  @@map("game_levels")
}

// ðŸš€ SISTEMA MULTIJUGADOR Ã‰PICO - Â¡LA REVOLUCIÃ“N DE LOGIVERSE! ðŸŽ®

// Salas Multijugador - Â¡Donde nacen las leyendas de la lÃ³gica!
model MultiplayerRoom {
  id          String     @id @default(cuid())
  name        String
  description String?
  type        RoomType   @default(CASUAL)
  maxPlayers  Int        @default(4)
  isPrivate   Boolean    @default(false)
  inviteCode  String?    @unique
  status      RoomStatus @default(WAITING)
  settings    Json       // game settings, difficulty, worlds allowed, etc.
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  createdBy   String

  // Relations
  creator      User @relation("RoomCreator", fields: [createdBy], references: [id])
  participants RoomParticipant[]
  sessions     MultiplayerSession[]
  messages     RoomMessage[]

  @@map("multiplayer_rooms")
}

// Participantes en salas - Â¡Los hÃ©roes de la lÃ³gica!
model RoomParticipant {
  id       String            @id @default(cuid())
  roomId   String
  userId   String
  role     ParticipantRole   @default(PLAYER)
  status   ParticipantStatus @default(ACTIVE)
  score    Int               @default(0)
  ranking  Int?
  joinedAt DateTime          @default(now())

  // Relations
  room MultiplayerRoom @relation(fields: [roomId], references: [id], onDelete: Cascade)
  user User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([roomId, userId])
  @@map("room_participants")
}

// Sesiones de juego multijugador - Â¡Las Ã©picas batallas!
model MultiplayerSession {
  id          String        @id @default(cuid())
  roomId      String
  levelId     String
  worldId     String
  status      SessionStatus @default(ACTIVE)
  startTime   DateTime
  endTime     DateTime?
  settings    Json          // specific game rules, AI moderation settings
  results     Json?         // final results, stats, and Loggie's commentary
  loggieData  Json?         // AI moderator data and insights
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relations
  room           MultiplayerRoom @relation(fields: [roomId], references: [id], onDelete: Cascade)
  level          GameLevel       @relation(fields: [levelId], references: [id])
  playerSessions PlayerSession[]

  @@map("multiplayer_sessions")
}

// SesiÃ³n individual de cada jugador - Â¡El rendimiento personal!
model PlayerSession {
  id              String    @id @default(cuid())
  sessionId       String
  userId          String
  startTime       DateTime
  endTime         DateTime?
  score           Int       @default(0)
  attempts        Int       @default(0)
  hintsUsed       Int       @default(0)
  timeSpent       Int       @default(0) // seconds
  answer          String?
  isCorrect       Boolean   @default(false)
  ranking         Int?
  achievements    Json?     // session-specific achievements
  loggieNotes     Json?     // AI observations and tips
  
  // Relations
  session MultiplayerSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  user    User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([sessionId, userId])
  @@map("player_sessions")
}

// Chat de salas - Â¡ComunicaciÃ³n Ã©pica con Loggie!
model RoomMessage {
  id        String      @id @default(cuid())
  roomId    String
  userId    String?     // null if from Loggie AI
  type      MessageType @default(CHAT)
  content   String
  metadata  Json?       // extra data like AI context, reactions, Loggie personality
  createdAt DateTime    @default(now())

  // Relations
  room MultiplayerRoom @relation(fields: [roomId], references: [id], onDelete: Cascade)
  user User?           @relation("RoomMessages", fields: [userId], references: [id], onDelete: SetNull)

  @@map("room_messages")
}

// EstadÃ­sticas globales de jugadores - Â¡Los rankings Ã©picos!
model PlayerStats {
  id                 String   @id @default(cuid())
  userId             String   @unique
  globalRank         Int?
  eloRating          Int      @default(1200) // Sistema ELO para ranking competitivo
  totalGamesPlayed   Int      @default(0)
  totalGamesWon      Int      @default(0)
  totalScore         Int      @default(0)
  averageTime        Float?   // average time per problem
  favoriteWorldId    String?
  winStreak          Int      @default(0)
  maxWinStreak       Int      @default(0)
  bestPerfomance     Json?    // best scores, fastest times, etc.
  lastActiveAt       DateTime @default(now())
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("player_stats")
}

// Torneos automÃ¡ticos - Â¡Los eventos Ã©picos!
model Tournament {
  id          String           @id @default(cuid())
  name        String
  description String?
  type        TournamentType   @default(WEEKEND)
  status      TournamentStatus @default(UPCOMING)
  maxPlayers  Int              @default(32)
  prizePool   Json?            // achievement rewards, titles, etc.
  rules       Json             // tournament rules and format
  startTime   DateTime
  endTime     DateTime?
  settings    Json             // world restrictions, difficulty, etc.
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  // Relations
  participants TournamentParticipant[]
  matches      TournamentMatch[]

  @@map("tournaments")
}

model TournamentParticipant {
  id           String @id @default(cuid())
  tournamentId String
  userId       String
  rank         Int?
  score        Int    @default(0)
  isEliminated Boolean @default(false)
  joinedAt     DateTime @default(now())

  // Relations
  tournament Tournament @relation(fields: [tournamentId], references: [id], onDelete: Cascade)
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([tournamentId, userId])
  @@map("tournament_participants")
}

model TournamentMatch {
  id           String      @id @default(cuid())
  tournamentId String
  round        Int
  matchNumber  Int
  player1Id    String
  player2Id    String
  winnerId     String?
  status       MatchStatus @default(PENDING)
  startTime    DateTime?
  endTime      DateTime?
  results      Json?       // detailed match results
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  // Relations
  tournament Tournament @relation(fields: [tournamentId], references: [id], onDelete: Cascade)
  player1    User       @relation("TournamentPlayer1", fields: [player1Id], references: [id])
  player2    User       @relation("TournamentPlayer2", fields: [player2Id], references: [id])
  winner     User?      @relation("TournamentWinner", fields: [winnerId], references: [id])

  @@map("tournament_matches")
}

// ðŸŽ® ENUMS PARA EL MULTIJUGADOR Ã‰PICO

enum RoomType {
  CASUAL        // Juego relajado
  RANKED        // Competitivo con ELO
  TOURNAMENT    // Torneo oficial
  PRIVATE       // Sala privada
  EDUCATIONAL   // Modo educativo con mÃ¡s ayuda de Loggie
  SPEED         // RÃ¡pido y frenÃ©tico
  COOPERATIVE   // Trabajo en equipo
}

enum RoomStatus {
  WAITING   // Esperando jugadores
  FULL      // Sala llena
  PLAYING   // En progreso
  FINISHED  // Terminada
  CANCELLED // Cancelada
}

enum ParticipantRole {
  PLAYER     // Jugador activo
  SPECTATOR  // Observador
  MODERATOR  // Moderador humano
}

enum ParticipantStatus {
  ACTIVE       // Activo en la sala
  INACTIVE     // Inactivo temporalmente
  DISCONNECTED // Desconectado
  KICKED       // Expulsado
  BANNED       // Baneado
}

enum SessionStatus {
  WAITING   // Esperando que empiecen todos
  ACTIVE    // En progreso
  PAUSED    // Pausada
  COMPLETED // Completada
  CANCELLED // Cancelada
}

enum TournamentType {
  WEEKEND     // Torneo de fin de semana
  DAILY       // Torneo diario
  SEASONAL    // Torneo estacional
  SPECIAL     // Evento especial
  CUSTOM      // Personalizado
}

enum TournamentStatus {
  UPCOMING    // PrÃ³ximamente
  REGISTRATION // Registro abierto
  ACTIVE      // En progreso
  FINISHED    // Terminado
  CANCELLED   // Cancelado
}

enum MatchStatus {
  PENDING    // Pendiente
  ACTIVE     // En progreso
  COMPLETED  // Completado
  CANCELLED  // Cancelado
}
