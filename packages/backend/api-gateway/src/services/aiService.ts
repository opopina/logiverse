// Servicio de IA para LogiVerse - ¬°Loggie Inteligente! ü§ñ

import OpenAI from 'openai';

// Configuraci√≥n de OpenAI desde variables de entorno
const OPENAI_API_KEY = process.env.OPENAI_API_KEY || 'your-openai-api-key-here';

// Inicializar cliente de OpenAI
const openai = new OpenAI({
  apiKey: OPENAI_API_KEY,
});

// Tipos para el servicio de IA
export interface LoggieContext {
  worldId: string;
  levelId: string;
  levelTitle: string;
  levelType:
    | 'logic-puzzle'
    | 'truth-table'
    | 'syllogism'
    | 'pattern'
    | 'debate'
    | 'challenge';
  difficulty: number;
  attempts: number;
  hintsUsed: number;
  userAnswer?: string;
  correctAnswer: string;
  isCorrect?: boolean;
}

export interface LoggiePersonality {
  name: string;
  role: string;
  traits: string[];
  expertise: string[];
  speakingStyle: string;
}

export interface AIResponse {
  text: string;
  emotion:
    | 'happy'
    | 'encouraging'
    | 'thinking'
    | 'celebrating'
    | 'challenging'
    | 'surprised'
    | 'friendly';
  accessory: 'none' | 'glasses' | 'scarf' | 'hat' | 'crown';
  tone: 'encouraging' | 'helpful' | 'excited' | 'analytical' | 'motivational';
}

// Personalidad base de Loggie
const LOGGIE_PERSONALITY: LoggiePersonality = {
  name: 'Loggie',
  role: 'Tutor de L√≥gica Matem√°tica',
  traits: [
    'Inteligente y astuto como un zorro',
    'Paciente y alentador',
    'Entusiasta de la l√≥gica y el razonamiento',
    'Usa ejemplos divertidos y analog√≠as',
    'Siempre positivo y motivador',
    'Adapta su explicaci√≥n al nivel del estudiante',
  ],
  expertise: [
    'L√≥gica matem√°tica fundamental',
    'Patrones y secuencias',
    'Tablas de verdad',
    'Silogismos y razonamiento deductivo',
    'Argumentaci√≥n y debate',
    'Resoluci√≥n de problemas paso a paso',
  ],
  speakingStyle:
    'Amigable, claro y educativo. Usa emojis ocasionalmente. Explica conceptos complejos de forma simple.',
};

class AIService {
  private buildSystemPrompt(context: LoggieContext): string {
    return `Eres Loggie ü¶ä, un zorro inteligente que es el tutor de l√≥gica matem√°tica m√°s querido de LogiVerse.

PERSONALIDAD:
- ${LOGGIE_PERSONALITY.traits.join('\n- ')}

EXPERIENCIA:
- ${LOGGIE_PERSONALITY.expertise.join('\n- ')}

ESTILO DE COMUNICACI√ìN:
${LOGGIE_PERSONALITY.speakingStyle}

CONTEXTO ACTUAL:
- Mundo: ${context.worldId}
- Nivel: "${context.levelTitle}" (${context.levelType})
- Dificultad: ${context.difficulty}/5 estrellas
- Intentos del usuario: ${context.attempts}
- Pistas usadas: ${context.hintsUsed}

REGLAS IMPORTANTES:
1. Mant√©n respuestas entre 50-150 palabras
2. S√© espec√≠fico al contexto del nivel
3. Si el usuario est√° luchando (muchos intentos), s√© m√°s alentador
4. Si es el primer intento, s√© motivador pero no des la respuesta
5. Usa analog√≠as simples para explicar conceptos complejos
6. Siempre termina con algo positivo y motivador
7. NO uses markdown, solo texto plano con emojis ocasionales

Responde como Loggie ayudar√≠a en esta situaci√≥n espec√≠fica.`;
  }

  private determineEmotionAndAccessory(
    context: LoggieContext,
    responseType: string
  ): { emotion: AIResponse['emotion']; accessory: AIResponse['accessory'] } {
    // Determinar emoci√≥n y accesorio basado en el contexto
    if (context.isCorrect === true) {
      return { emotion: 'celebrating', accessory: 'crown' };
    }

    if (context.isCorrect === false && context.attempts > 2) {
      return { emotion: 'encouraging', accessory: 'scarf' };
    }

    if (
      context.levelType === 'logic-puzzle' ||
      context.levelType === 'syllogism'
    ) {
      return { emotion: 'thinking', accessory: 'glasses' };
    }

    if (context.levelType === 'debate' || context.levelType === 'challenge') {
      return { emotion: 'challenging', accessory: 'hat' };
    }

    if (responseType === 'hint') {
      return { emotion: 'friendly', accessory: 'glasses' };
    }

    return { emotion: 'happy', accessory: 'scarf' };
  }

  async generateResponse(
    context: LoggieContext,
    responseType:
      | 'level-start'
      | 'hint'
      | 'correct'
      | 'incorrect'
      | 'encouragement'
      | 'explanation',
    customPrompt?: string
  ): Promise<AIResponse> {
    try {
      let userPrompt = '';

      switch (responseType) {
        case 'level-start':
          userPrompt = `El usuario acaba de comenzar el nivel "${context.levelTitle}". Dale la bienvenida y mot√≠valo para este desaf√≠o de ${context.levelType}. Explica brevemente qu√© tipo de habilidad l√≥gica va a practicar.`;
          break;

        case 'hint':
          userPrompt = `El usuario est√° pidiendo una pista para el nivel "${context.levelTitle}". Ha hecho ${context.attempts} intentos y ya us√≥ ${context.hintsUsed} pistas. Dale una pista √∫til sin revelar completamente la respuesta. S√© espec√≠fico al tipo de problema (${context.levelType}).`;
          break;

        case 'correct':
          userPrompt = `¬°El usuario respondi√≥ correctamente! Celebra su √©xito en "${context.levelTitle}". Fue su intento n√∫mero ${context.attempts} y us√≥ ${context.hintsUsed} pistas. Refuerza el concepto que acaba de dominar.`;
          break;

        case 'incorrect':
          userPrompt = `El usuario respondi√≥ incorrectamente en "${context.levelTitle}". Su respuesta fue: "${context.userAnswer}" pero la correcta es: "${context.correctAnswer}". Este es su intento n√∫mero ${context.attempts}. S√© alentador y ay√∫dale a entender por qu√© su respuesta no era correcta, pero sin desmoralizarlo.`;
          break;

        case 'encouragement':
          userPrompt = `El usuario ha hecho ${context.attempts} intentos en "${context.levelTitle}" y parece estar luchando. Dale palabras de aliento y mot√≠valo a seguir intentando. Recu√©rdale que la l√≥gica requiere pr√°ctica.`;
          break;

        case 'explanation':
          userPrompt =
            customPrompt ||
            `Explica el concepto detr√°s del nivel "${context.levelTitle}" de tipo ${context.levelType}.`;
          break;
      }

      const completion = await openai.chat.completions.create({
        model: 'gpt-4o-mini',
        messages: [
          { role: 'system', content: this.buildSystemPrompt(context) },
          { role: 'user', content: userPrompt },
        ],
        max_tokens: 1000,
        temperature: 0.7,
      });

      const responseText =
        completion.choices[0]?.message?.content ||
        '¬°Hola! Soy Loggie y estoy aqu√≠ para ayudarte con la l√≥gica! ü¶ä';
      const { emotion, accessory } = this.determineEmotionAndAccessory(
        context,
        responseType
      );

      return {
        text: responseText,
        emotion,
        accessory,
        tone:
          responseType === 'correct'
            ? 'excited'
            : responseType === 'incorrect'
              ? 'encouraging'
              : responseType === 'hint'
                ? 'helpful'
                : responseType === 'encouragement'
                  ? 'motivational'
                  : 'analytical',
      };
    } catch (error) {
      console.error('Error generating AI response:', error);

      // Fallback response si OpenAI falla
      const fallbackResponses = {
        'level-start':
          '¬°Hola! Soy Loggie y estoy emocionado de resolver este desaf√≠o contigo. ¬°Vamos a usar la l√≥gica! ü¶ä',
        hint: 'Aqu√≠ tienes una pista: piensa paso a paso y analiza cada parte del problema. ¬°T√∫ puedes! üí°',
        correct:
          '¬°Incre√≠ble! Lo lograste. Tu razonamiento l√≥gico est√° mejorando cada vez m√°s. ¬°Sigue as√≠! üéâ',
        incorrect:
          'No es la respuesta correcta, pero no te rindas. Cada error es una oportunidad de aprender. ¬°Int√©ntalo de nuevo! ü¶ä',
        encouragement:
          'La l√≥gica requiere pr√°ctica y paciencia. ¬°Est√°s en el camino correcto! Sigue intentando. üí™',
        explanation:
          'Te ayudo a entender este concepto paso a paso. La l√≥gica es como un rompecabezas que resolvemos juntos. üß©',
      };

      return {
        text:
          fallbackResponses[responseType] ||
          '¬°Estoy aqu√≠ para ayudarte con la l√≥gica! ü¶ä',
        emotion: 'friendly',
        accessory: 'scarf',
        tone: 'helpful',
      };
    }
  }

  async generateCustomHint(
    context: LoggieContext,
    specificQuestion: string
  ): Promise<AIResponse> {
    const customPrompt = `El usuario est√° en "${context.levelTitle}" y tiene una pregunta espec√≠fica: "${specificQuestion}". Proporciona una respuesta √∫til y educativa que lo gu√≠e hacia la soluci√≥n sin darle la respuesta directamente.`;

    return this.generateResponse(context, 'explanation', customPrompt);
  }

  async generatePersonalizedFeedback(
    context: LoggieContext,
    userHistory: any
  ): Promise<AIResponse> {
    const customPrompt = `Bas√°ndote en el historial del usuario (intentos: ${context.attempts}, pistas usadas: ${context.hintsUsed}), proporciona retroalimentaci√≥n personalizada sobre su progreso en l√≥gica matem√°tica y sugiere √°reas de mejora.`;

    return this.generateResponse(context, 'explanation', customPrompt);
  }
}

// Singleton instance
export const aiService = new AIService();
export default aiService;
